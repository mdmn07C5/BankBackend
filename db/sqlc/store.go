package postgresdb

import (
	"context"
	"database/sql"
	"fmt"
)

// Each query done by Queries in code generated by sqlc only does one operation
// on one specific table and therefor does not support transactions. Therefore
// we need to extend its functionality by embedding in in a new struct which
// will provide all functions to execude db queries and transactions

// Store provides all functions to execute db queries and transaction
type Store interface {
	Querier
	TransferTx(ctx context.Context, arg TransferTxParams) (TransferTxResult, error)
	CreateUserTx(ctx context.Context, arg CreateUserTxParams) (CreateUserTxResult, error)
}

// SQLStore provides all functions to execute SQL queries and transactions
type SQLStore struct {
	*Queries
	db *sql.DB
}

// NewStore creates and returns a new Store object
func NewStore(db *sql.DB) Store {
	return &SQLStore{
		db:      db,
		Queries: New(db),
	}
}

// execTx executes a generic db transaction
func (store *SQLStore) execTx(ctx context.Context, fn func(*Queries) error) error {
	// start a new db transaction
	tx, err := store.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	// create a new Queries object with that transaction
	q := New(tx)
	// and call the callback function with the created Queries
	err = fn(q)
	// commit or rollback the transaction based on the error returned by transaction
	if err != nil {
		// rollback returns its own errors, combine and report both errors
		if rbErr := tx.Rollback(); rbErr != nil {
			return fmt.Errorf("Transaction error: %v, Rollback error: %v", err, rbErr)
		}
		return err // return original err if rollback is successful
	}

	return tx.Commit()
}
