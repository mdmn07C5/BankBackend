package postgresdb

import (
	"context"
	"database/sql"
	"fmt"
)

// Each query done by Queries in code generated by sqlc only does one operation
// on one specific table and therefor does not support transactions. Therefore
// we need to extend its functionality by embedding in in a new struct which
// will provide all functions to execude db queries and transactions

type Store struct {
	*Queries
	db *sql.DB
}

// NewStore creates and returns a new Store object
func NewStore(db *sql.DB) *Store {
	return &Store{
		db:      db,
		Queries: New(db),
	}
}

// execTx executes a generic db transaction
func (store *Store) execTx(ctx context.Context, fn func(*Queries) error) error {
	// start a new db transaction
	tx, err := store.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	// create a new Queries object with that transaction
	q := New(tx)
	// and call the callback function with the created Queries
	err = fn(q)
	// commit or rollback the transaction based on the error returned by transaction
	if err != nil {
		// rollback returns its own errors, combine and report both errors
		if rbErr := tx.Rollback(); rbErr != nil {
			return fmt.Errorf("Transaction error: %v, Rollback error: %v", err, rbErr)
		}
		return err // return original err if rollback is successful
	}

	return tx.Commit()
}

// TransferTxParams contains the input parameters for the transfer transaction
// this is essentially the same as the CreateTransferParams generated by sqlc
type TransferTxParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

// TransferTxResult is the result of the transfer transaction
type TransferTxResult struct {
	Transfer    Transfer `json:"transfer"`
	FromAccount Account  `json:"from_account"`
	ToAccount   Account  `json:"to_account"`
	FromEntry   Entry    `json:"from_entry"`
	ToEntry     Entry    `json:"to_entry"`
}

// TransferTx performs a transfer form one account to another
func (store *Store) TransferTx(ctx context.Context, arg TransferTxParams) (TransferTxResult, error) {
	// create a transfer record/result
	var result TransferTxResult

	// maybe turn this into a generic instead of a closure in the future
	err := store.execTx(ctx, func(q *Queries) error {
		var err error
		result.Transfer, err = q.CreateTransfer(ctx, CreateTransferParams{
			FromAccountID: arg.FromAccountID,
			ToAccountID:   arg.ToAccountID,
			Amount:        arg.Amount,
		})

		if err != nil {
			return err
		}
		// add account entries
		result.FromEntry, err = q.CreateEntry(ctx, CreateEntryParams{
			AccountID: arg.FromAccountID,
			Amount:    -arg.Amount,
		})
		if err != nil {
			return err
		}

		result.ToEntry, err = q.CreateEntry(ctx, CreateEntryParams{
			AccountID: arg.ToAccountID,
			Amount:    arg.Amount,
		})
		if err != nil {
			return err
		}

		// TODO: update account balances because shit involves locking and preventing deadlock
		// update accounts' balance

		fromAcc, err := q.GetAccountForUpdate(ctx, arg.FromAccountID)
		if err != nil {
			return err
		}
		result.FromAccount, err = q.UpdateAccount(ctx, UpdateAccountParams{
			ID:      arg.FromAccountID,
			Balance: fromAcc.Balance - arg.Amount,
		})
		if err != nil {
			return err
		}
		toAcc, err := q.GetAccountForUpdate(ctx, arg.ToAccountID)
		if err != nil {
			return err
		}
		result.ToAccount, err = q.UpdateAccount(ctx, UpdateAccountParams{
			ID:      arg.ToAccountID,
			Balance: toAcc.Balance + arg.Amount,
		})

		if err != nil {
			return err
		}

		return nil
	})

	return result, err
}
