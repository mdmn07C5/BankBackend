package postgresdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgxpool"
)

// Each query done by Queries in code generated by sqlc only does one operation
// on one specific table and therefor does not support transactions. Therefore
// we need to extend its functionality by embedding in in a new struct which
// will provide all functions to execude db queries and transactions

// Store provides all functions to execute db queries and transaction
type Store interface {
	Querier
	TransferTx(ctx context.Context, arg TransferTxParams) (TransferTxResult, error)
	CreateUserTx(ctx context.Context, arg CreateUserTxParams) (CreateUserTxResult, error)
	VerifyEmailTx(ctx context.Context, arg VerifyEmailTxParams) (VerifyEmailTxResult, error)
}

// SQLStore provides all functions to execute SQL queries and transactions
type SQLStore struct {
	*Queries
	connPool *pgxpool.Pool
}

// NewStore creates and returns a new Store object
func NewStore(connPool *pgxpool.Pool) Store {
	return &SQLStore{
		connPool: connPool,
		Queries:  New(connPool),
	}
}
